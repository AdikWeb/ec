@use "sass:math";
@import "varables";

@function luminance($color) {
  $colors: (
          'red': red($color),
          'green': green($color),
          'blue': blue($color)
  );

  @each $name, $value in $colors {
    $adjusted: 0;
    $value: $value / 255;

    @if $value < 0.03928 {
      $value: $value / 12.92;
    } @else {
      $value: ($value + .055) / 1.055;
      $value: math.pow($value, 2.4);
    }

    $colors: map-merge($colors, ($name: $value));
  }

  @return (map-get($colors, 'red') * .2126) + (map-get($colors, 'green') * .7152) + (map-get($colors, 'blue') * .0722);
}

@function contrast($back, $front) {
  $backLum: luminance($back) + .05;
  $foreLum: luminance($front) + .05;
  @return math.max($backLum, $foreLum) / math.min($backLum, $foreLum);
}

@mixin whiteOrDark($color) {
  @if ($color != none) {
    @if (contrast($color, white) > contrast($color, black)) {
      color: #fff;
    } @else {
      color: $dark;
    }
  }
}

@function dl($color){
  @if (contrast($color, white) > contrast($color, black)) {
    @return lighten($color,7%);
  } @else {
    @return darken($color,7%);
  }
}

@mixin setBackgroundAndHover($baseColor, $type) {
  @if ($baseColor != none) {
    background-color: if($baseColor == none, transparent, $baseColor);
    @include whiteOrDark($baseColor);
  }
  &:hover {
    $color: dl(if($baseColor == none, $white, $baseColor));
    background-color: $color;
    @include whiteOrDark($baseColor);
  }
}

@mixin font-face($font-family, $file-path, $weight: normal, $style: normal) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;
    src: url('#{$file-path}.ttf') format('truetype');
  }
}
